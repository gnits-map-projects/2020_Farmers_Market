{"version":3,"file":"Collapse.umd.es2015.js","sources":["../src/components/collapse/Collapse.jsx"],"sourcesContent":["/* eslint-env browser */\n\n/**\n * All debug logs are removed on build\n */\n\nimport \"./collapse.css\";\nimport React, {\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n  useReducer\n} from \"react\";\nimport debugLog from \"./debugLog\";\n\n// using let instead of const,\n// experimenting with ES2015 bundle which gets a bit smaller when using let over const.\nlet COLLAPSED = \"collapsed\";\nlet COLLAPSING = \"collapsing\";\nlet EXPANDING = \"expanding\";\nlet EXPANDED = \"expanded\";\n\nlet defaultClassName = \"collapse-css-transition\";\nlet defaultElementType = \"div\";\nlet defaultCollapseHeight = \"0px\";\n\n/**\n *\n * @param {function} callback\n */\nfunction nextFrame(callback) {\n  requestAnimationFrame(function() {\n    //setTimeout(callback, 0); // NOT used because can be jumpy if click-spamming.\n    requestAnimationFrame(callback); // This is used.\n  });\n}\n\nfunction Collapse({\n  children,\n  transition,\n  style,\n  render,\n  elementType = defaultElementType,\n  isOpen,\n  collapseHeight = defaultCollapseHeight,\n  onInit,\n  onChange,\n  className = defaultClassName,\n  addState,\n  noAnim,\n  overflowOnExpanded,\n  ...rest\n}) {\n  let getCollapsedVisibility = () => (collapseHeight === \"0px\" ? \"hidden\" : \"\");\n\n  const [__, forceUpdate] = useReducer(_ => _ + 1, 0);\n\n  let elementRef = useRef();\n  let [callbackTick, setCallbackTick] = useState(0);\n\n  // Avoiding setState to control when stuff are updated.\n  // Might not be needed.\n  let state = useRef({\n    collapse: isOpen ? EXPANDED : COLLAPSED,\n    style: {\n      height: isOpen ? \"\" : collapseHeight,\n      visibility: isOpen ? \"\" : getCollapsedVisibility()\n    }\n  }).current;\n\n  useEffect(() => {\n    // Invoke callback when data are updated, use Effect to sync state.\n    callbackTick && onCallback(onChange);\n  }, [callbackTick]);\n\n  /**\n   *\n   * @param {function} callback\n   */\n  let onCallback = (callback, params = {}) => {\n    if (callback) {\n      debugLog(\"onCallback \" + callback.name);\n      callback({ state: state.collapse, style: state.style, ...params });\n    }\n  };\n\n  function setCollapsed() {\n    if (!elementRef.current) return; // might be redundant\n\n    // Update state\n    state.collapse = COLLAPSED;\n\n    debugLog(\"setCollapsed\");\n\n    state.style = {\n      height: collapseHeight,\n      visibility: getCollapsedVisibility()\n    };\n    forceUpdate();\n\n    setTimeout(() => setCallbackTick(Date.now), 0); // callback and re-render\n  }\n\n  function setCollapsing() {\n    if (!elementRef.current) return; // might be redundant\n\n    if (noAnim) {\n      return setCollapsed();\n    }\n\n    // Update state\n    state.collapse = COLLAPSING;\n\n    debugLog(\"setCollapsing\");\n\n    state.style = {\n      height: getElementHeight(),\n      visibility: \"\"\n    };\n    forceUpdate();\n\n    nextFrame(() => {\n      if (!elementRef.current) return;\n      if (state.collapse !== COLLAPSING) return;\n\n      state.style = {\n        height: collapseHeight,\n        visibility: \"\"\n      };\n      //forceUpdate();\n\n      setCallbackTick(Date.now); // callback and re-render\n    });\n  }\n\n  function setExpanding() {\n    if (!elementRef.current) return; // might be redundant\n\n    if (noAnim) {\n      return setExpanded();\n    }\n\n    // Updatetate\n    state.collapse = EXPANDING;\n\n    debugLog(\"setExpanding\");\n\n    nextFrame(() => {\n      if (!elementRef.current) return; // might be redundant\n      if (state.collapse !== EXPANDING) return;\n\n      state.style = {\n        height: getElementHeight(),\n        visibility: \"\"\n      };\n      // forceUpdate();\n\n      setCallbackTick(Date.now); // callback and re-render\n    });\n  }\n\n  function setExpanded() {\n    if (!elementRef.current) return; // might be redundant\n\n    // Update state\n    state.collapse = EXPANDED;\n\n    debugLog(\"setExpanded\");\n\n    state.style = {\n      height: \"\",\n      visibility: \"\"\n    };\n    forceUpdate();\n\n    setTimeout(() => setCallbackTick(Date.now), 0); // callback and re-render\n  }\n\n  function getElementHeight() {\n    // @ts-ignore\n    return `${elementRef.current.scrollHeight}px`;\n  }\n\n  function onTransitionEnd({ target, propertyName }) {\n    if (target === elementRef.current && propertyName === \"height\") {\n      let styleHeight = target.style.height;\n\n      debugLog(\"onTransitionEnd\", state.collapse, propertyName, styleHeight);\n\n      switch (state.collapse) {\n        case EXPANDING:\n          if (styleHeight === \"\" || styleHeight === collapseHeight)\n            // This is stale, a newer event has happened before this could execute\n            console.warn(\n              `onTransitionEnd height unexpected ${styleHeight}`,\n              \"ignore setExpanded\"\n            );\n          else setExpanded();\n          break;\n        case COLLAPSING:\n          if (styleHeight === \"\" || styleHeight !== collapseHeight)\n            // This is stale, a newer event has happened before this could execute\n            console.warn(\n              `onTransitionEnd height unexpected ${styleHeight}`,\n              \"ignore setCollapsed\"\n            );\n          else setCollapsed();\n          break;\n        default:\n          console.warn(\"Ignored in onTransitionEnd\", state.collapse);\n      }\n    }\n  }\n\n  // getDerivedStateFromProps\n  let didOpen = state.collapse === EXPANDED || state.collapse === EXPANDING;\n\n  if (!didOpen && isOpen) setExpanding();\n\n  if (didOpen && !isOpen) setCollapsing();\n  // END getDerivedStateFromProps\n\n  let overflow =\n    state.collapse === EXPANDED && overflowOnExpanded ? \"\" : \"hidden\";\n\n  let computedStyle = {\n    overflow,\n    transition,\n    ...style,\n    ...state.style\n  };\n  let ElementType = elementType;\n\n  let callbackRef = useCallback(\n    node => {\n      if (node) {\n        elementRef.current = node;\n        onCallback(onInit, { node });\n        debugLog(\"callback ref\");\n      }\n    },\n    [elementType]\n  );\n\n  let collapseClassName = addState\n    ? `${className} --c-${state.collapse}`\n    : className;\n\n  debugLog(\"Render\");\n\n  return (\n    <ElementType\n      ref={callbackRef}\n      style={computedStyle}\n      onTransitionEnd={onTransitionEnd}\n      className={collapseClassName}\n      {...rest}\n    >\n      {typeof children === \"function\"\n        ? children(state.collapse)\n        : typeof render === \"function\"\n        ? render(state.collapse)\n        : children}\n    </ElementType>\n  );\n}\n\nexport default Collapse;\n"],"names":["COLLAPSED","COLLAPSING","EXPANDING","EXPANDED","defaultClassName","defaultElementType","defaultCollapseHeight","nextFrame","callback","requestAnimationFrame","children","transition","style","render","elementType","isOpen","collapseHeight","onInit","onChange","className","addState","noAnim","overflowOnExpanded","rest","getCollapsedVisibility","__","forceUpdate","useReducer","_","elementRef","useRef","callbackTick","setCallbackTick","useState","state","collapse","height","visibility","current","useEffect","onCallback","params","name","setCollapsed","setTimeout","Date","now","setExpanded","getElementHeight","scrollHeight","didOpen","setExpanding","setCollapsing","computedStyle","overflow","ElementType","callbackRef","useCallback","node","collapseClassName","React","ref","onTransitionEnd","target","propertyName","styleHeight"],"mappings":"o+CAkBA,IAAIA,EAAY,YACZC,EAAa,aACbC,EAAY,YACZC,EAAW,WAEXC,EAAmB,0BACnBC,EAAqB,MACrBC,EAAwB,MAM5B,SAASC,EAAUC,GACjBC,sBAAsB,WAEpBA,sBAAsBD,YAI1B,gBAAkBE,SAChBA,EADgBC,WAEhBA,EAFgBC,MAGhBA,EAHgBC,OAIhBA,EAJgBC,YAKhBA,EAAcT,EALEU,OAMhBA,EANgBC,eAOhBA,EAAiBV,EAPDW,OAQhBA,EARgBC,SAShBA,EATgBC,UAUhBA,EAAYf,EAVIgB,SAWhBA,EAXgBC,OAYhBA,EAZgBC,mBAahBA,KACGC,mKAECC,EAAyB,IAA0B,QAAnBR,EAA2B,SAAW,SAEnES,EAAIC,GAAeC,aAAWC,GAAKA,EAAI,EAAG,OAE7CC,EAAaC,YACZC,EAAcC,GAAmBC,WAAS,GAI3CC,EAAQJ,SAAO,CACjBK,SAAUpB,EAASZ,EAAWH,EAC9BY,MAAO,CACLwB,OAAQrB,EAAS,GAAKC,EACtBqB,WAAYtB,EAAS,GAAKS,OAE3Bc,QAEHC,YAAU,KAERR,GAAgBS,EAAWtB,IAC1B,CAACa,QAMAS,EAAa,CAAChC,EAAUiC,EAAS,MAC/BjC,IACuBA,EAASkC,KAClClC,KAAW0B,MAAOA,EAAMC,SAAUvB,MAAOsB,EAAMtB,OAAU6B,eAIpDE,IACFd,EAAWS,UAGhBJ,EAAMC,SAAWnC,EAIjBkC,EAAMtB,MAAQ,CACZwB,OAAQpB,EACRqB,WAAYb,KAEdE,IAEAkB,WAAW,IAAMZ,EAAgBa,KAAKC,KAAM,aA6DrCC,IACFlB,EAAWS,UAGhBJ,EAAMC,SAAWhC,EAIjB+B,EAAMtB,MAAQ,CACZwB,OAAQ,GACRC,WAAY,IAEdX,IAEAkB,WAAW,IAAMZ,EAAgBa,KAAKC,KAAM,aAGrCE,aAEGnB,EAAWS,QAAQW,qBAmC3BC,EAAUhB,EAAMC,WAAahC,GAAY+B,EAAMC,WAAajC,GAE3DgD,GAAWnC,iBAjFTc,EAAWS,YAEZjB,SACK0B,IAITb,EAAMC,SAAWjC,EAIjBK,EAAU,KACHsB,EAAWS,SACZJ,EAAMC,WAAajC,IAEvBgC,EAAMtB,MAAQ,CACZwB,OAAQY,IACRX,WAAY,IAIdL,EAAgBa,KAAKC,SA4DDK,GAEpBD,IAAYnC,iBAnHTc,EAAWS,YAEZjB,SACKsB,IAITT,EAAMC,SAAWlC,EAIjBiC,EAAMtB,MAAQ,CACZwB,OAAQY,IACRX,WAAY,IAEdX,IAEAnB,EAAU,KACHsB,EAAWS,SACZJ,EAAMC,WAAalC,IAEvBiC,EAAMtB,MAAQ,CACZwB,OAAQpB,EACRqB,WAAY,IAIdL,EAAgBa,KAAKC,SAwFDM,OAMpBC,KACFC,SAHApB,EAAMC,WAAahC,GAAYmB,EAAqB,GAAK,SAIzDX,WAAAA,GACGC,KACAsB,EAAMtB,OAEP2C,EAAczC,EAEd0C,EAAcC,cAChBC,IACMA,IACF7B,EAAWS,QAAUoB,EACrBlB,EAAWvB,EAAQ,CAAEyC,KAAAA,MAIzB,CAAC5C,IAGC6C,EAAoBvC,KACjBD,SAAiBe,EAAMC,WAC1BhB,SAKFyC,gBAACL,KACCM,IAAKL,EACL5C,MAAOyC,EACPS,0BAvEqBC,OAAEA,EAAFC,aAAUA,OAC7BD,IAAWlC,EAAWS,SAA4B,WAAjB0B,EAA2B,KAC1DC,EAAcF,EAAOnD,MAAMwB,cAEHF,EAAMC,SAE1BD,EAAMC,eACPjC,EACiB,KAAhB+D,GAAsBA,IAAgBjD,GAMrC+B,eAEF9C,EACiB,KAAhBgE,GAAsBA,IAAgBjD,GAMrC2B,OAiDTxB,UAAWwC,GACPpC,GAEiB,mBAAbb,EACJA,EAASwB,EAAMC,UACG,mBAAXtB,EACPA,EAAOqB,EAAMC,UACbzB"}